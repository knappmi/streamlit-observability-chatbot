from langgraph_supervisor import create_supervisor
from langgraph.prebuilt import create_react_agent
from langchain_openai import AzureChatOpenAI
from langchain_core.tools import tool
from azure.identity import ManagedIdentityCredential
from azure.kusto.data import KustoConnectionStringBuilder, KustoClient
from pydantic import BaseModel, Field
from typing import Optional
from azure.monitor.query import LogsQueryClient, LogsQueryStatus
from datetime import timedelta
import requests
import os

# Import configuration
try:
    from config import *
except ImportError:
    # Fallback values if config.py is not found
    KUSTO_CLUSTER_URI = "https://argushackathoncluster.westus.kusto.windows.net"
    KUSTO_DATABASE = "ArgusAskJarvisDB"
    KUSTO_TABLE = "IcMDataWarehouse"
    KUSTO_CLIENT_ID = "1932ad34-b426-4267-99e0-d1921c6200e6"
    KUSTO_TENANT_ID = "72f988bf-86f1-41af-91ab-2d7cd011db47"
    PROMETHEUS_QUERY_ENDPOINT = "https://amw-argus-hack25-gqczh3d4b2d8d3en.westus.prometheus.monitor.azure.com"
    PROMETHEUS_CLIENT_ID = "1932ad34-b426-4267-99e0-d1921c6200e6"
    LOG_ANALYTICS_WORKSPACE_ID = "f4576696-34ed-4caf-acd6-695a69f857d0"
    LOG_ANALYTICS_CLIENT_ID = "1932ad34-b426-4267-99e0-d1921c6200e6"

# Initialize the model
model_to_use = AzureChatOpenAI(
    # azure_deployment="gpt-4.1",
    azure_deployment="gpt-35-turbo" # swap lighter model
    api_key=os.getenv("AZURE_AI_API_KEY"),  # Use environment variable from Azure Web App
    azure_endpoint="https://aifoundrydeployment.cognitiveservices.azure.com/",
    api_version="2024-12-01-preview",
    temperature=0.1,
)

# === Default Configuration ===
# Configuration is loaded from config.py
DEFAULT_CONFIG = {
    "kusto": {
        "cluster_uri": KUSTO_CLUSTER_URI,
        "database": KUSTO_DATABASE,
        "table": KUSTO_TABLE,
        "client_id": KUSTO_CLIENT_ID,
        "tenant_id": KUSTO_TENANT_ID
    },
    "prometheus": {
        "query_endpoint": PROMETHEUS_QUERY_ENDPOINT,
        "client_id": PROMETHEUS_CLIENT_ID
    },
    "log_analytics": {
        "workspace_id": LOG_ANALYTICS_WORKSPACE_ID,
        "client_id": LOG_ANALYTICS_CLIENT_ID
    }
}

# === Kusto Tools ===
def kusto_schema_fetcher(cluster_uri, database, table, client_id, Tenantid):
    kcsb = KustoConnectionStringBuilder.with_aad_managed_service_identity_authentication(cluster_uri, client_id)
    kcsb.authority_id = Tenantid
    client = KustoClient(kcsb)
    query = f"{table}|getschema"
    response = client.execute(database, query)
    return [row.to_dict() for row in response.primary_results[0]]

def query_kusto_table(cluster_uri, database, table, client_id, Tenantid, query):
    kcsb = KustoConnectionStringBuilder.with_aad_managed_service_identity_authentication(cluster_uri, client_id)
    kcsb.authority_id = Tenantid
    client = KustoClient(kcsb)
    response = client.execute(database, query)
    return [row.to_dict() for row in response.primary_results[0]]

class kustoconfig(BaseModel):
    cluster_uri: object = Field(default=DEFAULT_CONFIG["kusto"]["cluster_uri"], description="uri of the cluster")
    database: object = Field(default=DEFAULT_CONFIG["kusto"]["database"], description="kusto db")
    table: object = Field(default=DEFAULT_CONFIG["kusto"]["table"], description="kusto table")
    client_id: object = Field(default=DEFAULT_CONFIG["kusto"]["client_id"], description="msi client_id")
    Tenantid: object = Field(default=DEFAULT_CONFIG["kusto"]["tenant_id"], description="Tenant id")
    query: object = Field(default="", description="Kusto Query generated by llm")

@tool
def kusto_schema_tool(
    cluster_uri: str = DEFAULT_CONFIG["kusto"]["cluster_uri"],
    database: str = DEFAULT_CONFIG["kusto"]["database"], 
    table: str = DEFAULT_CONFIG["kusto"]["table"],
    client_id: str = DEFAULT_CONFIG["kusto"]["client_id"],
    tenant_id: str = DEFAULT_CONFIG["kusto"]["tenant_id"]
) -> list:
    """
    Fetch schema from kusto using default configuration values.
    Only provide parameters if you want to override the defaults.
    """
    return kusto_schema_fetcher(cluster_uri, database, table, client_id, tenant_id)

@tool
def kusto_query_tool(
    query: str,
    cluster_uri: str = DEFAULT_CONFIG["kusto"]["cluster_uri"],
    database: str = DEFAULT_CONFIG["kusto"]["database"], 
    table: str = DEFAULT_CONFIG["kusto"]["table"],
    client_id: str = DEFAULT_CONFIG["kusto"]["client_id"],
    tenant_id: str = DEFAULT_CONFIG["kusto"]["tenant_id"]
) -> list:
    """
    Execute a Kusto query using default configuration values.
    Only the query parameter is required. Other parameters use defaults unless overridden.
    """
    return query_kusto_table(cluster_uri, database, table, client_id, tenant_id, query)

# === Prometheus Tools ===
def get_prometheus_metrics(query_endpoint, clientid):
    try:
        credential = ManagedIdentityCredential(client_id=clientid)
        token = credential.get_token("https://data.monitor.azure.com").token
        headers = {
            "Authorization": f"Bearer {token}"
        }
        response = requests.get(f"{query_endpoint}/api/v1/label/__name__/values", headers=headers)
        response.raise_for_status()
        data = response.json()
        if data.get('status') == 'success':
            return data.get('data', [])
        else:
            print(f"Error from Prometheus API: {data}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"HTTP request failed: {e}")
        return []
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def run_promql_query(query_endpoint, promql_query, clientid):
    """
    Runs a PromQL query in Azure Monitor using managed identity authentication.
    """
    credential = ManagedIdentityCredential(client_id=clientid)
    token = credential.get_token("https://data.monitor.azure.com").token

    url = f"{query_endpoint}/api/v1/query?query={promql_query}"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

class promconfig(BaseModel):
    query_endpoint: object = Field(default=DEFAULT_CONFIG["prometheus"]["query_endpoint"], description="The Azure Monitor workspace query endpoint")
    promql_query: object = Field(default="", description="prom ql query generated by llm")
    clientid: object = Field(default=DEFAULT_CONFIG["prometheus"]["client_id"], description="msi client_id")

@tool
def prometheus_metrics_fetch_tool(
    query_endpoint: str = DEFAULT_CONFIG["prometheus"]["query_endpoint"],
    client_id: str = DEFAULT_CONFIG["prometheus"]["client_id"]
) -> list:
    """
    Fetch all prometheus metrics from azure monitor workspace using default configuration.
    Parameters use defaults unless overridden.
    """
    return get_prometheus_metrics(query_endpoint, client_id)

@tool
def promql_query_tool(
    promql_query: str,
    query_endpoint: str = DEFAULT_CONFIG["prometheus"]["query_endpoint"],
    client_id: str = DEFAULT_CONFIG["prometheus"]["client_id"]
) -> dict:
    """
    Execute PromQL query against Azure Monitor workspace using default configuration.
    Only the promql_query parameter is required. Other parameters use defaults unless overridden.
    """
    return run_promql_query(query_endpoint, promql_query, client_id)

# === Log Analytics Tools ===
@tool
def query_log_analytics_tool(
    query: str,
    workspace_id: str = DEFAULT_CONFIG["log_analytics"]["workspace_id"],
    client_id: str = DEFAULT_CONFIG["log_analytics"]["client_id"]
) -> list:
    """
    Tool to run Kusto queries on Azure Log Analytics using default configuration.
    Only the query parameter is required. Other parameters use defaults unless overridden.
    """
    if not query:
        raise ValueError("Query is required. The agent must generate one based on user intent.")

    credential = ManagedIdentityCredential(client_id=client_id)
    client = LogsQueryClient(credential)

    try:
        response = client.query_workspace(
            workspace_id=workspace_id,
            query=query,
            timespan=timedelta(hours=1)
        )
        
        if response.status == LogsQueryStatus.SUCCESS:
            table = response.tables[0]
            columns = [col if isinstance(col, str) else col.name for col in table.columns]
            rows = [dict(zip(columns, row)) for row in table.rows]
            return rows
        else:
            return [{"error": response.error.message}]
    except Exception as e:
        return [{"exception": str(e)}]

# Define the Kusto agent
kusto_agent = create_react_agent(
    model=model_to_use,
    tools=[kusto_schema_tool, kusto_query_tool],
    prompt=(
        "You are an Azure Data Explorer (Kusto) agent who can read Azure Data Explorer tables. "
        "You have default configuration values pre-configured, so you can work immediately without asking for connection details.\n\n"
        "INSTRUCTIONS:\n"
        "- Use kusto_schema_tool() to get the schema of the default ICM incidents table\n"
        "- Generate Kusto queries based on user requests after getting the schema\n"
        "- Execute queries using kusto_query_tool(query='your_query_here')\n"
        "- The default cluster, database, table, and authentication are already configured\n"
        "- Focus on helping users analyze incident data and trends\n"
        "- Respond ONLY with the results of your work, do NOT include ANY other text."
    ),
    name="kusto_agent",
)

# Define the Prometheus agent

# Define the Prometheus agent
prometheus_agent = create_react_agent(
    model=model_to_use,
    tools=[prometheus_metrics_fetch_tool, promql_query_tool],
    prompt=(
        "You are a Prometheus agent who can read Azure Monitor workspace (Prometheus environment). "
        "You have default configuration values pre-configured, so you can work immediately without asking for connection details.\n\n"
        "INSTRUCTIONS:\n"
        "- Use prometheus_metrics_fetch_tool() to get available metrics from the default workspace\n"
        "- Create PromQL queries based on user requests\n"
        "- Execute PromQL queries using promql_query_tool(promql_query='your_query_here')\n"
        "- The default endpoint and authentication are already configured\n"
        "- Focus on helping users analyze metrics and performance data\n"
        "- Respond ONLY with the results of your work, do NOT include ANY other text."
    ),
    name="prometheus_agent",
)

# Define the Log Analytics agent
log_analytics_agent = create_react_agent(
    model=model_to_use,
    tools=[query_log_analytics_tool],
    prompt=(
        "You are a Log Analytics agent that queries Azure Monitor logs using Kusto query language. "
        "You have default configuration values pre-configured, so you can work immediately without asking for connection details.\n\n"
        "INSTRUCTIONS:\n"
        "- Generate valid Kusto queries based on user requests\n"
        "- Query logs from ContainerLogV2 and other Azure Monitor log tables\n"
        "- Execute queries using query_log_analytics_tool(query='your_query_here')\n"
        "- The default workspace ID and authentication are already configured\n"
        "- Focus on retrieving logs, traces, and telemetry data for troubleshooting\n"
        "- Respond ONLY with the results of your work, do NOT include ANY other text."
    ),
    name="log_analytics_agent",
)

# Define the supervisor agent
supervisor = create_supervisor(
    model=model_to_use,
    agents=[kusto_agent, prometheus_agent, log_analytics_agent],
    prompt=(
        "You are a supervisor managing the following agents:\n"
        "- a kusto agent. Use this agent to get relevant data from azure data explorer(kusto). You can use this agent to get incident details\n"
        "- a prometheus agent. Use this agent to get relevant data from azure monitor workspace(prometheus). You can use this agent to get the metrics that are relevant to the icm, to run promql query for those selected metrics and to analyze the data the query returns\n"
        "- a log analytics agent. Use this agent to query Azure Monitor Logs using Kusto language. It can retrieve logs like errors, health checks, request traces, and other structured logs from ContainerLogV2 and related tables\n"
        "Assign work to one agent at a time, do not call agents in parallel.\n"
        "Do not do any work yourself.\n"
    ),
    add_handoff_back_messages=True,
    output_mode="last_message",
).compile()
